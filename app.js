// Generated by CoffeeScript 1.6.2
(function() {
  var MeCab, app, auth, cheerio, express, getListByYahoo, http, io, mecab, path, routes, server, user, _;

  express = require('express');

  routes = require('./routes');

  user = require('./routes/user');

  http = require('http');

  path = require('path');

  app = express();

  auth = require('./tmp/auth');

  cheerio = require('cheerio');

  MeCab = require('mecab-async');

  mecab = new MeCab();

  _ = require('underscore');

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, 'public')));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', routes.index);

  app.get('/users', user.list);

  server = http.createServer(app).listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  getListByYahoo = function(socket, word, hop, next, dict) {
    var options, origin;

    hop += 1;
    origin = {
      "text": word,
      "value": 5,
      "part": "origin",
      "fixed": true,
      "x": 400,
      "y": 400
    };
    console.log(origin);
    socket.json.emit("send node", origin);
    options = {
      hostname: 'search.yahoo.co.jp',
      path: "/search?p=" + next + "&aq=-1&oq=&ei=UTF-8&fr=top_ga1_sa&x=wrt&num=40"
    };
    return http.get(options, function(res) {
      var body;

      console.log("status" + res.statusCode);
      body = '';
      res.on('data', function(data) {
        return body += data.toString();
      });
      return res.on('end', function() {
        var $, e, src;

        try {
          $ = cheerio.load(body);
          src = $("a").text();
          src += $("#web").text();
          return mecab.parse(src, function(err, result) {
            var json, parts, _i, _j, _len, _len1, _results;

            for (_i = 0, _len = result.length; _i < _len; _i++) {
              parts = result[_i];
              if (parts[1] === '名詞' && parts[2] === '一般') {
                if (res = _.findWhere(dict, {
                  "part": "noun",
                  "text": parts[0]
                })) {
                  res.value += 1;
                }
                dict.push({
                  "text": parts[0],
                  "part": "noun",
                  "value": 1
                });
              }
              if (parts[1] === '形容詞') {
                dict.push({
                  "text": parts[0],
                  "part": "adj",
                  "value": 1
                });
              }
            }
            console.log("::::::::::::::::::::::::::");
            dict = _.reject(dict, function(word) {
              return word.value < hop;
            });
            dict = _.reject(dict, function(word) {
              return word.text === "www";
            });
            dict = _.reject(dict, function(word) {
              return word.text === "co";
            });
            dict = _.reject(dict, function(word) {
              return word.text === "jp";
            });
            dict = _.reject(dict, function(word) {
              return word.text === "com";
            });
            dict = _.reject(dict, function(word) {
              return word.text === "ne";
            });
            dict = _.reject(dict, function(word) {
              return word.text === "net";
            });
            _results = [];
            for (_j = 0, _len1 = dict.length; _j < _len1; _j++) {
              word = dict[_j];
              console.log(word);
              socket.json.emit("send node", word);
              socket.json.emit("add link", json = {
                "tempSource": origin.text,
                "tempTarget": word.text
              });
              if (hop < 3) {
                _results.push(getListByYahoo(socket, word.text, hop, word.text + " " + origin.text, dict));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        } catch (_error) {
          e = _error;
          return console.log(e);
        }
      });
    }).on('error', function(e) {
      return console.log(e);
    });
  };

  io = require('socket.io').listen(server);

  io.sockets.on('connection', function(socket) {
    var dict;

    console.log("connect");
    dict = new Array;
    socket.on('word', function(word) {
      return getListByYahoo(socket, word, 1, word, dict);
    });
    return socket.on('disconnect', function() {
      return console.log("disconnect");
    });
  });

}).call(this);
